from django.http import HttpResponse
from django.urls import ResolverMatch, resolve, reverse
from parameterized import parameterized

import product.tests.base_tests as bt
from dashboard import views
from utils.mixins.auth import TestCaseWithLogin


class DashboardTests(TestCaseWithLogin):
    def test_url_dashboard_is_correct(self) -> None:
        url: str = reverse('dashboard:user_dashboard')
        self.assertEqual(url, '/dashboard/painel-do-usuario/')

    def test_dashboard_view_is_correct(self) -> None:
        url: str = reverse('dashboard:user_dashboard')
        response: ResolverMatch = resolve(url)
        self.assertEqual(response.func.view_class, views.DashboardView)

    def test_dashboard_will_be_redirected_if_user_not_logged_in(self) -> None:
        response = self.client.get(
            reverse('dashboard:user_dashboard')
        )
        self.assertRedirects(
            response,
            '/?next=/dashboard/painel-do-usuario/',
            302
        )

    def test_dashboard_status_code_200_if_user_logged_in(self) -> None:
        # make login
        self.make_login()

        response = self.client.get(
            reverse('dashboard:user_dashboard')
        )

        self.assertEqual(response.status_code, 200)

    def test_dashboard_loads_correct_template(self) -> None:
        # make login
        self.make_login()

        response: HttpResponse = self.client.get(
            reverse('dashboard:user_dashboard')
        )

        self.assertTemplateUsed(response, 'dashboard/pages/dashboard.html')

    @parameterized.expand([
        'meus investimentos',
        'ações',
        'renda fixa',
        'tesouro direto',
        'fiis',
        'total',
        'R$',
        'Total recebido em proventos',
        'taxas e impostos pagos',
    ])
    def test_dashboard_loads_correct_content(self, text: str) -> None:
        # make login
        self.make_login()

        response: HttpResponse = self.client.get(
            reverse('dashboard:user_dashboard')
        )

        content = response.content.decode('utf-8')

        self.assertIn(
            text,
            content,
        )

    @parameterized.expand([
        'total investido',
        'Total recebido em proventos',
        'taxas e impostos pagos',
        'R$ 140,00',  # total actions profits
        'R$ 50,00',  # total fiis profits
        'R$ 360,00',  # total fixed inc invested
        'R$ 86,50',  # total fixed inc profits
        'R$ 900,00',  # total direct treasure invested
        'R$ 141,00',  # total direct treasure profits
        'R$ 80,50',  # total tax and irpf
    ])
    def test_dashboard_loads_correct_summary_content(self, text: str) -> None:
        '''
            it is not possible to test the total amount
            invested in actions and fiis, as the value of each
            asset is dynamically generated by the yfinance library
        '''
        # make login
        _, user = self.make_login()

        # create the action and history
        bt.make_user_action(user,
                            'bbas3',
                            'banco do brasil',
                            create_history=True,
                            unit_price=1000,
                            create_profits=True,
                            profits_value=150,
                            tax_and_irpf=10,
                            )

        # create the fii and history
        bt.make_user_fii(user,
                         'mxrf11',
                         'maxi renda',
                         create_history=True,
                         value=500,
                         create_profits=True,
                         profits_value=50,
                         )

        # create the fixed income product
        bt.make_fixed_income_product(user,
                                     value=360,
                                     interest_receipt='semestral',
                                     tax=11.50,
                                     profits_value=98,
                                     )

        # create the direct treasure product
        bt.make_direct_treasure(user,
                                value=900,
                                interest_receipt='mensal',
                                profits_value=200,
                                tax=59,
                                )

        response: HttpResponse = self.client.get(
            reverse('dashboard:user_dashboard')
        )

        content = response.content.decode('utf-8')

        self.assertIn(
            text,
            content,
        )
